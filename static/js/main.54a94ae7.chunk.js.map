{"version":3,"sources":["logo.svg","Movie.js","MoviesList.js","MovieDetail.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Movie","_ref","movie","react_default","a","createElement","react_router_dom","to","concat","id","Overdrive_min_default","Poster","src","poster_path","alt","title","styled","img","_templateObject","MoviesList","state","movies","fetch","res","json","this","setState","results","console","warn","_context","t0","MovieGrid","map","src_Movie","desc","overview","key","PureComponent","div","MoviesList_templateObject","props","match","params","MovieWrapper","backdrop","backdrop_path","MovieInfo","release_date","Component","MovieDetail_templateObject","_templateObject2","App","className","logo","react_router","exact","path","component","MovieDetail","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,ibCwDxC,IAceC,EAXD,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAH,OAEZC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAE,GAAAC,OAAKN,EAAMO,KAEjBN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAWK,GAAIP,EAAMO,IACnBN,EAAAC,EAAAC,cAACM,EAAD,CAAQC,IAAG,GAAAJ,OARG,kCAQHA,OAAmBN,EAAMW,aAAeC,IAAKZ,EAAMa,WAevDJ,EAASK,IAAOC,IAAVC,qLC/CJC,6MA1BbC,MAAQ,CACNC,OAAQ,gOAKYC,MAAM,4LAAlBC,kBACeA,EAAIC,cAAnBH,SACNI,KAAKC,SAAS,CACZL,OAAQA,EAAOM,4DAIjBC,QAAQC,KAARC,EAAAC,iJAKF,OACE5B,EAAAC,EAAAC,cAAC2B,EAAD,KACGP,KAAKL,MAAMC,OAAOY,IAAI,SAAC/B,GAAD,OAAWC,EAAAC,EAAAC,cAAC6B,EAAD,CAAOhC,MAAOA,EAAOiC,KAAMjC,EAAMkC,SAAUC,IAAKnC,EAAMO,eAtBvE6B,iBA8BnBN,EAAYhB,IAAOuB,IAAVC,wdCYArB,6MAvCbC,MAAQ,CACNlB,MAAO,gOAMaoB,MAAK,sCAAAd,OAAuCiB,KAAKgB,MAAMC,MAAMC,OAAOlC,GAA/D,2EAAjBc,kBACcA,EAAIC,cAAlBtB,SACNuB,KAAKC,SAAS,CACZxB,4DAIF0B,QAAQC,KAARC,EAAAC,iJAKF,IAEQ7B,EAAUuB,KAAKL,MAAflB,MACR,OACEC,EAAAC,EAAAC,cAACuC,EAAD,CAAcC,SAAQ,GAAArC,OAHF,mCAGEA,OAAqBN,EAAM4C,gBAC/C3C,EAAAC,EAAAC,cAAC0C,EAAD,KACE5C,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAWK,GAAIP,EAAMO,IACnBN,EAAAC,EAAAC,cAACM,EAAD,CAAQC,IAAG,GAAAJ,OAPC,kCAODA,OAAmBN,EAAMW,aAAeC,IAAKZ,EAAMa,SAEhEZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKH,EAAMa,OACXZ,EAAAC,EAAAC,cAAA,UAAKH,EAAM8C,cACX7C,EAAAC,EAAAC,cAAA,SAAIH,EAAMkC,oBAjCGa,aA4CnBL,EAAe5B,IAAOuB,IAAVW,IAGE,SAAAT,GAAK,OAAIA,EAAMI,WAK7BE,EAAY/B,IAAOuB,IAAVY,KCwIAC,EA5BH,kBACVjD,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKgD,UAAU,OACblD,EAAAC,EAAAC,cAAA,UAAQgD,UAAU,cAChBlD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAG,KACPJ,EAAAC,EAAAC,cAAA,OAAKO,IAAK0C,IAAMD,UAAU,WAAWvC,IAAI,WAG7CX,EAAAC,EAAAC,cAACkD,EAAA,EAAD,KAYEpD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWvC,IAEjChB,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,OAAOC,UAAWC,QC/KxBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrB,MACvB,2DCZNsB,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.54a94ae7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ff9a163f.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from  'styled-components';\r\nimport Overdrive from 'react-overdrive';\r\n\r\n// *********\r\n// Before converting to a functional stateless component\r\n// We don't really need all this code since all this component does is simply render some data\r\n// *********\r\n// export default class Movie extends Component {\r\n//   // Using proptypes (which is a node package we have to install) is a way of detailing what props will make an appearance in your component\r\n//   // You can also detail default prop types in the case that a proptype has not been passed for a given component\r\n//   // `static` refers to the fact that the propTypes will not change  \r\n//   static propTypes = {\r\n//     // The line below simply tells our applicaiton that we are expecting a movie prop of the type object\r\n//     // movie: PropTypes.object\r\n//     // If we were to use the line below, we would have errors in the console due to the fact that the movie prop being passed in is an object, and not a string\r\n//     // movie: PropTypes.string\r\n//     // Even better than using PropTypes.object is using PropTypes.shape, as it allows us to get more granular about what keys and value types the prop being passed in will have\r\n//     // The isRequired is exactly what it sounds like: it makes it so that the compiler will throw an error if that particular prop is not passed in\r\n//     movie: PropTypes.shape({\r\n//       title: PropTypes.string.isRequired,\r\n//       // desc: PropTypes.string\r\n//     }),\r\n//     // We have moved\r\n//     desc: PropTypes.string\r\n//   }\r\n  \r\n\r\n//   // defaultProps are exactly what they sound like: a way for your to have a default value for a given prop if it is not passed into the component\r\n//   // One of the central problems of defaultProps, however, is that we are not able to assign defaultProps to a nested prop (like description)\r\n//   // As a result, we need to move it outside of the movie PropType.shape and have it as it's own PropType, and also pass it in explicitly as a prop in the parent component\r\n//   static defaultProps = {\r\n//     // THIS WOULD NOT WORK\r\n//     // movie: PropTypes.shape({\r\n//     //   desc: 'Description not available'\r\n//     // })\r\n//     desc: 'Description not available'\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//       {/* Without the key attribute on the div, React will complain in the console that you need it. */}\r\n//       {/* You need it because React needs a way to keep track of the items in an array */}\r\n//       {/* In our case, it makes sense to use the ID of each movie as this key attribute, since every movie has a (hopefully) unique ID */}\r\n//         <h3>{this.props.movie.title}</h3>\r\n//         {/* The below line was necessary when desc was a sub-prop of the movie prop, but since it is being passed in as it's own prop, we use the next line down */}\r\n//         {/* <p>{this.props.movie.desc}</p> */}\r\n//         <p>{this.props.desc}</p>\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n\r\nconst POSTER_PATH = 'http://image.tmdb.org/t/p/w154';\r\n// Again, because this only returns the Movie component, we're going to define Movie as a function that implicitly returns the markup for the movie\r\n// The prop from the parent component is passed in as `movie` (and destructured using the {} syntax) and then used to populate the Movie component\r\nconst Movie = ({ movie }) => (\r\n  // Using the movie.id prop allows us to dynamically link to each movie\r\n  <Link to={`${movie.id}`}>\r\n    {/* Overdrive is React component installed from NPM, it requires a unique ID on the components that you are transitioning in both states (i.e. beginning and finished state) */}\r\n    <Overdrive id={movie.id}>\r\n      <Poster src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title}/>\r\n    </Overdrive>\r\n  </Link>\r\n);\r\n\r\n// We have this line down here (after the function definition) because in JavaScript, we cannot export a function definition\r\nexport default Movie;\r\n\r\nMovie.propTypes = {\r\n  movie: PropTypes.shape({\r\n    title: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\n// This is an example of a styled component, where the CSS is written in the JS for the component\r\nexport const Poster = styled.img`\r\n  box-shadow: 0 0 35px black;\r\n`;","import React, { PureComponent } from 'react';\r\nimport Movie from './Movie';\r\nimport styled from  'styled-components';\r\n\r\nclass MoviesList extends PureComponent {\r\n\r\n  state = {\r\n    movies: []\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const res = await fetch('https://api.themoviedb.org/3/discover/movie?api_key=12e9e2de03ebd1a7c3cfa3857fde0e3f&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1')\r\n      const movies = await res.json();\r\n      this.setState({\r\n        movies: movies.results\r\n      })\r\n    }\r\n    catch(error) {\r\n      console.warn(error);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <MovieGrid>\r\n        {this.state.movies.map((movie) => <Movie movie={movie} desc={movie.overview} key={movie.id} /> )}\r\n      </MovieGrid>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MoviesList;\r\n\r\nconst MovieGrid = styled.div`\r\n  display: grid;\r\n  padding: 1rem;\r\n  grid-template-columns: repeat(6, 1fr);\r\n  grid-row-gap: 1rem;\r\n`;\r\n","import React, { Component } from 'react';\r\nimport { Poster } from './Movie';\r\nimport styled from  'styled-components';\r\nimport Overdrive from 'react-overdrive';\r\n\r\nclass MoviesList extends Component {\r\n\r\n  state = {\r\n    movie: {}\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      // NOTE: note that the props for this come from the Route component that we are using to display this\r\n      const res = await fetch(`https://api.themoviedb.org/3/movie/${this.props.match.params.id}?api_key=12e9e2de03ebd1a7c3cfa3857fde0e3f&language=en-US`)\r\n      const movie = await res.json();\r\n      this.setState({\r\n        movie,\r\n      })\r\n    }\r\n    catch(error) {\r\n      console.warn(error);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const POSTER_PATH = 'http://image.tmdb.org/t/p/w154';\r\n    const BACKDROP_PATH = 'http://image.tmdb.org/t/p/w1280';\r\n    const { movie } = this.state;\r\n    return (\r\n      <MovieWrapper backdrop={`${BACKDROP_PATH}${movie.backdrop_path}`} >\r\n        <MovieInfo>\r\n          <Overdrive id={movie.id}>\r\n            <Poster src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title}/>\r\n          </Overdrive>\r\n          <div>\r\n            <h1>{movie.title}</h1>\r\n            <h3>{movie.release_date}</h3>\r\n            <p>{movie.overview}</p>\r\n          </div>\r\n        </MovieInfo>\r\n      </MovieWrapper>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MoviesList;\r\n\r\n// More styled components\r\nconst MovieWrapper = styled.div`\r\n  position: relative;\r\n  padding-top: 50vh;\r\n  background: url(${props => props.backdrop}) no-repeat;\r\n  background-size: cover;\r\n  background-position-x: 50%;\r\n`;\r\n\r\nconst MovieInfo = styled.div`\r\n  background: white;\r\n  text-align: left;\r\n  padding: 2rem 10%;\r\n  display: flex;\r\n\r\n  > div {\r\n    margin-left: 20px;\r\n  }\r\n\r\n  img {\r\n    position: relative;\r\n    top: -5rem;\r\n  }\r\n`;\r\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Link,\n} from 'react-router-dom';\nimport logo from './logo.svg';\nimport './App.css';\n// import Movie from './Movie'; NOTE: before creating MoviesList component\nimport MoviesList from './MoviesList';\nimport MovieDetail from './MovieDetail';\n// This is our first component that we created as an example of the things you can do in React\n// Feel free to un-commment it out if you want to play around with it\n// class App extends Component {\n\n//   // The constructor is called when a component is first created\n//   // Props of the component are not immediately available to the constructor unless they are passed in explicitly\n//   // constructor(props) {\n//   //   super(props);\n//   //   console.log(\"constructor\");\n//   // }\n\n//   // This is fired BEFORE the component gets rendered/mounted\n//   // At this point, we will have access to `this`, because `this` has been created\n//   // componentWillMount() {\n//   //   console.log(\"will mount\");\n//   // }\n\n//   // This is fired right AFTER the component gets rendered/mounted\n//   // componentDidMount() {\n//   //   console.log(\"did mount\");\n//   // }\n\n//   state = {\n//     toggle: true,\n//     input: 'Hello'\n//   }\n\n//   toggle = () => {\n//     this.setState({\n//       toggle: !this.state.toggle\n//     })\n//   }\n\n//   updateInput = (event) => {\n//     this.setState({\n//       input: event.target.value\n//     })\n//   }\n\n//   submit = () => {\n//     console.log(this.text);\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           <Welcome text=\"Welcome to using props\"/>\n//           <a\n//             className=\"App-link\"\n//             href=\"https://reactjs.org\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//           >\n//             Learn React\n//           </a>\n//           {/* {\n//             this.state.toggle &&\n//             <p>This should show and hide</p>\n//           } */}\n//           {/* <button onClick={this.toggle}>Show/Hide</button> */}\n//           <input type=\"text\" ref={(input) => this.text = input}/>\n//           {/* Note: the ref line is simply an arrow function that takes in the text input in as a param */}\n//           {/* From there, we assign the `text` field of the App component (which we also create by using this line) to the input itself */}\n//           {/* To confirm this, we can log this.text in the componentDidMount method */}\n//           <input type=\"text\" onChange={this.updateInput} value={this.state.input}/>\n//           {/* We don't need to pass anything into updateInput in this case, because we will have access to the event, which we can then use to get the value of the input */}\n//           <button onClick={this.submit}>Show Value</button>\n//         </header>\n//       </div>\n//     );\n//   }\n// }\n\n// class Welcome extends Component {\n//   render() {\n//     const { text } = this.props;\n//     return (\n//       <h1 className=\"App-title\">{text}</h1>\n//     );\n//   }\n// }\n\n// const movies = [\n//   {\n//     id: 1,\n//     title: 'Star Wars',\n//     desc: 'A movie about star stuff'\n//   },\n//   {\n//     id: 2,\n//     title: 'Spiderman'\n//   },\n//   {\n//     id: 3,\n//     title: 'Sound City'\n//   },\n//   {\n//     id: 4,\n//     title: 'Goodwill Hunting'\n//   },\n//   {\n//     id: 5,\n//     title: 'Blade Runner'\n//   },\n// ];\n\n// NOTE: before turning creating MoviesList component and turning this component into a functional stateless compomnent\n// class App extends Component {\n\n//   // This is our default state for this component (in this case, the component is our entire app, so it is essentially the state for our application)\n//   // In this case, this will be updated in the componentDidMount method\n//   state = {\n//     movies: []\n//   }\n\n//   // Here, we're going to use the componentDidMount lifecycle method as opposed to the constructor or componentWillMount method to fetch data from our API\n//   // The reason for this is that if we put it in one of the two methods above, our UI won't render at all until that data is returned\n//   // This is problematic because when we're waiting for the data to return, it could take a few seconds (during which nothing will be loaded), which isn't a good user experience\n//   async componentDidMount() {\n//     // The async keyword before the function allows us to run an asynchronos function, and also to await values within it (useful for situations where we have a result that we need to wait to return from somewhere, like an API)\n//     // With async functions, it's a good idea to try { whatever code you want to happen } catch { catch here in case of errors }\n//     try {\n//       const res = await fetch('https://api.themoviedb.org/3/discover/movie?api_key=12e9e2de03ebd1a7c3cfa3857fde0e3f&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1')\n//       const movies = await res.json();\n//       this.setState({\n//         movies: movies.results\n//       })\n//     }\n//     catch(error) {\n//       console.warn(error);\n//     }\n//   }\n\n//   render() {\n//     console.log(this.state.movies);\n//     return (\n//       <Router>\n//         <div className=\"App\">\n//           <header className=\"App-header\">\n//             <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           </header>\n//           <Switch>\n//             <Route path=\"/test\" component={Test} />\n//             {this.state.movies.map((movie) => <Movie movie={movie} desc={movie.overview} key={movie.id} /> )}\n//           </Switch>\n//         </div>\n//       </Router>\n//     )\n//   }\n// }\n\nconst App = () => (\n  <Router>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Link to=\"/\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </Link>\n      </header>\n      <Switch>\n        {/* The way that React Router works is that it checks for the path and see if ANYTHING matches it, and shows content based on that */}\n        {/* Given that, with the below configuration we will see the MoviesList component on both site.com/ and site.com/test */}\n        {/* <Route path=\"/\" component={MoviesList} />\n        <Route path=\"/test\" component={Test} /> */}\n\n        {/* One way of fixing that is reversing the order of the routes so that ONLY site.com/test will show the Test component and ONLY site.com/ will show the MoviesList component */}\n        {/* <Route path=\"/test\" component={Test} />\n        <Route path=\"/\" component={MoviesList} /> */}\n        {/* The problem with this approach, however, is that it can easily become complex when more routes are added and is also very error prone */}\n\n        {/* The solution then becomes the `exact` keyword on our routes, which, as you would expect, will only match based on the exact path */}\n        <Route exact path=\"/\" component={MoviesList} />\n        {/* Using the :id syntax allows us to dynamically create a route for each movie with an ID */}\n        <Route exact path=\"/:id\" component={MovieDetail} />\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}